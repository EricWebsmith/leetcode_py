import unittest
from typing import Counter, List


class DSU:
    def __init__(self, n: int) -> None:
        self.p = list(range(n))
        self.e = 0

    def find(self, x: int) -> int:
        if x != self.p[x]:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def merge(self, x: int, y: int) -> int:
        px = self.find(x)
        py = self.find(y)
        if px == py:
            return 1

        if px > py:
            self.p[px] = py
        else:
            self.p[py] = px
        self.e += 1
        return 0


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)

        dsu = DSU(n)
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    dsu.merge(i, j)

        size_dict = Counter(dsu.p)
        mal_to_group = [dsu.find(i) for i in initial]
        mal_dict = Counter(mal_to_group)

        ans = min(initial)
        max_saved = 0
        for i, g in zip(initial, mal_to_group):
            if mal_dict[g] != 1:
                continue
            saved = size_dict[g]
            if saved > max_saved:
                max_saved = saved
                ans = i
            if saved == max_saved and i < ans:
                ans = i

        return ans


def test(
    testObj: unittest.TestCase,
    graph: List[List[int]],
    initial: List[int],
    expected: int,
) -> None:

    so = Solution()

    actual = so.minMalwareSpread(graph, initial)

    testObj.assertEqual(actual, expected)


class TestClass(unittest.TestCase):
    def test_1(self):
        test(self, [[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1], 0)

    def test_2(self):
        test(self, [[1, 0, 0], [0, 1, 0], [0, 0, 1]], [0, 2], 0)

    def test_3(self):
        test(self, [[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 2], 1)

    def test_4(self):
        test(self, [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]], [3, 1], 3)

    def test_5(self):
        test(
            self,
            [
                [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            ],
            [7, 8, 6, 2, 3],
            2,
        )


if __name__ == "__main__":
    unittest.main()

# thumb down!!!
# You did not tell us what if we cannot find such a node!!!

"""
Runtime: 1662 ms, faster than 94.59%
Memory Usage: 16.6 MB, less than 91.12%
"""
