import unittest
from typing import List
from collections import Counter
from data_structure.binary_tree import TreeNode, array_to_treenode, treenode_to_array
from data_structure.nary_tree import Node, array_to_node, node_to_array
null = None


class DSU:
    def __init__(self, n: int) -> None:
        self.p = list(range(n))
        self.e = 0

    def find(self, x: int) -> int:
        if x != self.p[x]:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x: int, y: int) -> int:
        px = self.find(x)
        py = self.find(y)
        if px == py:
            return 1

        if px > py:
            self.p[px] = py
        else:
            self.p[py] = px
        self.e += 1
        return 0


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initial_set = set(initial)
        clean = [x for x in range(n) if x not in initial_set]

        dsu = DSU(n)
        for i in range(len(clean)):
            for j in range(i+1, len(clean)):
                if graph[clean[i]][clean[j]]:
                    dsu.union(clean[i], clean[j])

        group_size_dict = Counter(dsu.p)

        count = Counter()
        node_to_compo = {}

        for u in initial:
            components = set()
            for v in clean:
                if graph[u][v]:
                    components.add(dsu.find(v))
            node_to_compo[u] = components

            for c in components:
                count[c] += 1

        best = (-1, None)  # score, node
        for u, components in node_to_compo.items():
            score = 0
            for c in components:
                if count[c] == 1:  # uniquely infected
                    score += group_size_dict[c]
            if score > best[0] or (score == best[0] and u < best[1]):
                best = (score, u)

        return best[1]


def test(testObj: unittest.TestCase, graph: List[List[int]], initial: List[int], expected: int) -> None:

    so = Solution()

    actual = so.minMalwareSpread(graph, initial)

    testObj.assertEqual(actual, expected)


class TestClass(unittest.TestCase):

    def test_1(self):
        test(self,   [[1, 1, 0], [1, 1, 0], [0, 0, 1]],  [0, 1], 0)

    def test_2(self):
        test(self,   [[1, 1, 0], [1, 1, 1], [0, 1, 1]],  [0, 1], 1)

    def test_3(self):
        test(self,   [[1, 1, 0, 0], [1, 1, 1, 0], [
             0, 1, 1, 1], [0, 0, 1, 1]],  [0, 1], 1)

    def test_4(self):
        test(self,   [[1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1]],
             [2, 1, 9], 9)


if __name__ == '__main__':
    unittest.main()

'''
Runtime: 1339 ms, faster than 79.10% of Python3 online submissions for Minimize Malware Spread II.
Memory Usage: 16.6 MB, less than 68.66% of Python3 online submissions for Minimize Malware Spread II.
'''
